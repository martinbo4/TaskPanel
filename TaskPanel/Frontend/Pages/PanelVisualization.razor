@page "/PanelVisualization"

@using BusinessLogic
@using BusinessLogic.DTOs
@inherits Auth
@inject TaskLogic TaskLogic
@inject TeamLogic TeamLogic
@inject PanelLogic PanelLogic
@inject UserDto UserLog

<PageTitle>PanelVisualization</PageTitle>

<h1>
    Panel Visualization
    <a href="/AddPanel" class="btn btn-success btn-sm" style="float: right;margin-right: 40px;">Add new panel</a>
</h1>

<h3>
    User Logged: @UserLog.FirstNameAndLastName
</h3>

<table class="table">
    <thead>
    <tr>
        <th>Name</th>
        <th>Team</th>
        <th>Description</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var panel in _panels)
    {
        <tr>
            <td>@panel.Name</td>
            <td>@panel.TeamDto.Name</td>
            <td>@panel.Description</td>
            <td>
                @if (!@panel.IsOverdueTaskPanel)
                {
                    <a class="btn btn-success btn-sm" href="/panel/@panel.Id/open/">Open</a>
                    <a class="btn btn-success btn-sm" href="/panel/@panel.Id/edit/">Edit</a>
                    @if (UserLog.IsAdmin || (@panel.CreatorDto.Id == UserLog.Id))
                    {
                        <button class="btn btn-danger btn-sm" @onclick="(() => DeletePanel(panel.Id))">Delete</button>
                    }
                }
                else
                {
                    <a class="btn btn-success btn-sm" href="/@panel.Id/openOverdue/">Open overdue panel</a>
                }
            </td>
        </tr>
    }

    <br />

    <div class="form-error">
        @_message
    </div>

    @if (_showConfirmDelete)
    {
        <div class="confirm-delete">
            <button class="btn btn-warning" @onclick="ConfirmDelete">Yes, Delete</button>
            <button class="btn btn-outline-primary" @onclick="CancelDelete">Cancel</button>
        </div>
    }

    <br />
    </tbody>
</table>

@code {
    private string _message = "";
    private bool _showConfirmDelete = false;
    private UserDto? _currentUser;
    private List<TeamDto>? _userTeams;
    private List<PanelDto?>? _panels;
    private PanelDto? _currentPanel;

    protected override void OnInitialized()
    {
        _currentUser = UserLog;
        _userTeams = TeamLogic.GetUserTeams(_currentUser);
        _panels = PanelLogic.GetTeamsPanels(_userTeams);
        TaskLogic.UpdateTasks();
    }

    private void DeletePanel(int id)
    {
        try
        {
            _currentPanel = PanelLogic.GetPanelById(id);
            PanelLogic.DeletePanel(_currentPanel, UserLog, false);
            _userTeams = TeamLogic.GetUserTeams(_currentUser!);
            _panels = PanelLogic.GetTeamsPanels(_userTeams);
        }
        catch (Exception ex)
        {
            _message = ex.Message + " If you delete this panel, it will be permanently deleted. Are you sure you want to proceed?";
            _showConfirmDelete = true;
        }
    }

    private void ConfirmDelete()
    {
        PanelLogic.DeletePanel(_currentPanel, UserLog, true);
        _userTeams = TeamLogic.GetUserTeams(_currentUser!);
        _panels = PanelLogic.GetTeamsPanels(_userTeams);
        _showConfirmDelete = false;
        _message = "";
    }

    private void CancelDelete()
    {
        _showConfirmDelete = false;
        _message = "Panel deletion canceled.";
    }
}