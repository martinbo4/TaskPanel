@page "/panel/{id:int}/open/"

@using BusinessLogic
@using BusinessLogic.DTOs
@inherits Auth
@inject PanelLogic PanelLogic
@inject UserDto UserLog
@inject TaskLogic TaskLogic

<PageTitle>TaskVisualization</PageTitle>

<h1>
    Task Visualization
    <a href="/@Id/addTask/" class="btn btn-success btn-sm" style="float: right;margin-right: 40px;">Add new task</a>
</h1>

<h3>
    User Logged: @UserLog.FirstNameAndLastName, Current Panel: @_currentPanel.Name
</h3>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Priority</th>
        <th>Description</th>
        <th>Deadline</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var task in _tasks)
    {
    <tr>
        <td>@task.Title</td>
        <td>@task.Priority</td>
        <td>@task.Description</td>
        <td>@task.Deadline</td>
        <td>
            <a class="btn btn-success btn-sm" href="/@task.Id/@Id/openComments/">Open Comments</a>
            <a class="btn btn-success btn-sm" href="/@task.Id/@Id/edit/">Edit</a>
            <button class="btn btn-danger btn-sm" @onclick="(() => DeleteTask(task.Id))">Delete</button>
        </td>
    </tr>
    }

    <br />

    <div class="form-error">
        @_message
    </div>

    @if (_showConfirmDelete)
    {
        <div class="confirm-delete">
            <button class="btn btn-warning" @onclick="ConfirmDelete">Yes, Delete</button>
            <button class="btn btn-outline-primary" @onclick="CancelDelete">Cancel</button>
        </div>
    }

    <br />
    </tbody>
</table>

@code {
    [Parameter]
    public int Id { get; set; }

    private List<TaskDto>? _tasks;
    private TaskDto? _currentTask;
    private UserDto? _currentUser;
    private PanelDto? _currentPanel;
    private string _message = "";
    private bool _showConfirmDelete = false;
    protected override void OnInitialized()
    {
        _currentUser = UserLog;
        _tasks = PanelLogic.GetPanelTasks(Id);
        _currentPanel = PanelLogic.GetPanelById(Id);
        TaskLogic.UpdateTasks();
    }

    private void DeleteTask(int id2)
    {
        try
        {
            _currentTask = TaskLogic.GetTaskById(id2, Id);
            TaskLogic.DeleteTask(_currentTask, _currentUser!, false);
            _tasks = PanelLogic.GetPanelTasks(Id);
        }
        catch (Exception ex)
        {
            _message = ex.Message + " If you delete this task, it will be permanently deleted. Are you sure you want to proceed?";
            _showConfirmDelete = true;
        }
    }

    private void ConfirmDelete()
    {
        TaskLogic.DeleteTask(_currentTask, _currentUser!, true);
        _tasks = PanelLogic.GetPanelTasks(Id);
        _showConfirmDelete = false;
        _message = "";
    }

    private void CancelDelete()
    {
        _showConfirmDelete = false;
        _message = "Task deletion canceled.";
    }
}
