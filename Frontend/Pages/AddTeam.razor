@page "/AddTeam"
@inherits Auth
@using BusinessLogic
@using BusinessLogic.DTOs
@inject TeamLogic TeamLogic
@inject UserLogic UserLogic
@inject UserDto UserLog
@inject NavigationManager NavigationManager


<PageTitle>Add Team</PageTitle>

<h1>Add Team</h1>

<h3>
    User Logged: @UserLog.FirstNameAndLastName
</h3>

<form>

    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" @bind="_currentTeam.Name" />
    </div>

    <div class="form-group">
        <label for="maxMembers">MaxMembers</label>
        <input type="number" class="form-control" id="maxMembers" @bind="_currentTeam.MaxMembers" min="1"/>
    </div>
    
    <div class="form-group">
        <label for="description">Description</label>
        <input type="text" class="form-control" id="description" @bind="_currentTeam.Description" />
    </div>
    <div class="form-group">
        <label for="user">Select Users</label>
        <select data-mdb-select-init multiple class="form-control" id="users" @onchange="OnChangeUsers" >
            @foreach (var user in _users){
            <option value="@user.LogInDto.Email" >
                @user.FirstNameAndLastName
            </option>
            }
        </select>
    </div>

    <br />

    <div class="form-error">
        @_message
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>

    <a href="/TeamManagement">Cancelar</a>

</form>

@code {
    private TeamDto? _currentTeam;
    private string _message = "";
    
    private List<UserDto>? _users;
    
    protected override void OnInitialized()
    {
        _currentTeam = new TeamDto();
        _currentTeam.MaxMembers = 1;
        _users = UserLogic.GetAllUsers();
    }

    private void SaveChanges()
    {
        try
        {
            TeamLogic.CreateTeam(_currentTeam);
            NavigationManager.NavigateTo("/TeamManagement");
        }
        catch (ArgumentException ex)
        {
            _message = ex.Message;
        }
    }
    
    public void OnChangeUsers(ChangeEventArgs e){

        var usersIdsString = (string?[])e.Value!;
        var users = new List<UserDto>();
        foreach (var stringId in usersIdsString)
        {
            var user = UserLogic.GetUserByEmail(stringId);
            users.Add(user);
        }
        _currentTeam!.MemberDtos = users;
    }
}