@page "/{id:int}/edit/"

@using BusinessLogic
@using BusinessLogic.DTOs
@inherits Auth
@inject UserLogic UserLogic
@inject UserDto UserLog
@inject NavigationManager NavigationManager

<h1>Edit User</h1>

<h3>
    User Logged: @UserLog.FirstNameAndLastName
</h3>

<form>
    <div class="form-group">
        <label for="NameAndSurname">Name And Surname</label>
        <input type="text" class="form-control" id="NameAndSurname" @bind="_currentUser.FirstNameAndLastName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="text" class="form-control" id="email" @bind="_currentUser.LogInDto.Email" />
    </div>

    <div class="form-group">
        <label for="birthdate">Birthdate</label>
        <input type="date" class="form-control" id="birthdate" @bind="_currentUser.Birthdate" />
    </div>

    <div class="form-group">
        <label for="password">Password: If the password field is left empty, a random one will be generated.</label>
        <input type="text" class="form-control" id="password" @bind="_currentUser.LogInDto.Password" />
    </div>

    <br />

    <div class="form-error">
        @_message
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/UserManagement">Cancelar</a>
</form>

@code {
    [Parameter]
    public int Id{ get; set; }
    private string _message = "";
    private string? _email = "";
    
    private UserDto? _currentUser;
    
    protected override void OnInitialized(){
        _currentUser = UserLogic.GetUserById(Id);
        _email = _currentUser.LogInDto!.Email;
    }
    
    private void SaveChanges()
    {
        try
        {
            if (_currentUser!.LogInDto!.Password=="")
            {
                _currentUser.LogInDto.Password = UserLogic.GenerateRandomPassword();
            }
            UserLogic.ModifyUser(_email,_currentUser);
            NavigationManager.NavigateTo("/UserManagement");
        }
        catch (ArgumentException ex)
        {
            _message = ex.Message;
        }
    }
}